{"version":3,"sources":["components/Location/Location.js","components/Weather/WeatherData/Temperature.js","constants/states.js","components/Weather/WeatherData/ExtraInfo.js","components/Weather/WeatherData/WeatherData.js","services/transformWeather.js","components/Weather/WeatherLocation.js","components/Weather/LocationList.js","components/Weather/ForecastExtended/ForecastItem.js","services/transformForecast.js","components/Weather/ForecastExtended/ForecastExtended.js","components/App.js","serviceWorker.js","index.js"],"names":["Location","props","react_default","a","createElement","className","city","Temperature","_ref","temperature","weatherState","react_weathericons_lib_default","name","stateToIconName","size","getWeatherIcon","ExtraInfo","humidity","wind","concat","WeatherData","data","WeatherData_Temperature","WeatherData_ExtraInfo","transformWeather","weatherData","weather","_weatherData$main","main","temp","speed","id","getWeatherState","Math","floor","WeatherLocation","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","urlWeather","fetch","then","json","setState","onWeatherLocationClick","_this$state","onClick","components_Location_Location","Weather_WeatherData_WeatherData","CircularProgress_default","style","color","purple","thickness","Component","LocationList","cities","onSelectedLocation","map","Weather_WeatherLocation","key","handleWeatherLocationClick","proptTypes","PropTypes","array","func","ForecastItem","weekDay","hour","transformForecast","list","filter","item","moment","unix","dt","utc","format","API_KEY","ForecastExtended","updateCity","forecastData","renderProgress","nextProps","forecast","ForecastExtended_ForecastItem","renderForecastItemDays","App","handleSelectionLocation","lib","xs","AppBar_default","Toolbar_default","IconButton_default","aria-label","Menu_default","Typography_default","variant","md","lg","Weather_LocationList","Paper_default","elevation","Weather_ForecastExtended_ForecastExtended","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a82b1733.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Location = (props) => {\n  return (\n    <div className='Location'>\n      <h1 className='Location__title'>{props.city}</h1>\n    </div>\n  );\n}\n\nLocation.propTypes = {\n  city: PropTypes.string.isRequired,\n}\n\nexport default Location;","import React from 'react';\nimport WeatherIcons from 'react-weathericons';\nimport {\n  CLOUD,\n  CLOUDY,\n  SUN,\n  RAIN,\n  SNOW,\n  WINDY,\n  THUNDER,\n  DRIZZLE\n} from '../../../constants/states';\nimport PropTypes from 'prop-types';\n\n\nconst stateToIconName = weatherState => {\n  switch (weatherState) {\n    case CLOUD:\n      return \"cloud\";\n    case CLOUDY:\n      return \"cloudy\";\n    case SUN:\n      return \"day-sunny\";\n    case RAIN:\n      return \"rain\";\n    case SNOW:\n      return \"snow\";\n    case WINDY:\n      return \"windy\";\n    case THUNDER:\n      return \"thunder\";\n    case DRIZZLE:\n      return \"drizzle\";\n    default:\n      return \"day-sunny\";\n  }\n};\n\nconst getWeatherIcon = weatherState => {\n  return (<WeatherIcons\n            name={stateToIconName(weatherState)}\n            size=\"3x\"\n            className=\"Temperature__icon\"/>);\n};\n\nconst Temperature = ({temperature, weatherState}) => {\n  return (\n    <div className='Temperature'>\n      {getWeatherIcon(weatherState)}\n      <span className='Temperature__degrees'>{temperature}</span>\n      <span className='Temperature__symbol'>Â°C</span>\n    </div>\n  )\n}\n\nTemperature.propTypes = {\n  temperature: PropTypes.number.isRequired,\n  weatherState: PropTypes.string,\n};\n\n\nexport default Temperature;","export const CLOUD = \"cloud\";\nexport const CLOUDY = \"cloudy\";\n\nexport const SUN = \"sun\";\n\nexport const RAIN = \"rain\";\n\nexport const SNOW = \"snow\";\n\nexport const WINDY = \"windy\";\n\nexport const THUNDER = \"thunder\";\n\nexport const DRIZZLE = \"drizzle\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ExtraInfo = ({humidity, wind}) => (\n  <div className='ExtraInfo'>\n    <span className='ExtraInfo__text'>{`Humidity: ${humidity} %`}</span>\n    <span className='ExtraInfo__text'>{`Wind: ${wind}`}</span>\n  </div>\n);\n\nExtraInfo.propTypes = {\n  humidity: PropTypes.number.isRequired,\n  wind: PropTypes.string.isRequired,\n}\nexport default ExtraInfo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Temperature from './Temperature';\nimport ExtraInfo from './ExtraInfo';\n\n\nconst WeatherData = ({ data }) => {\n  const { temperature, weatherState, humidity, wind } = data;\n  return (\n    <div className='WeatherData'>\n      <Temperature temperature={temperature} weatherState={weatherState}/>\n      <ExtraInfo humidity={humidity} wind={wind} />\n    </div>\n  );\n}\n\nWeatherData.propTypes = {\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n  })\n};\n\n\nexport default WeatherData;","import { CLOUDY,\n  SUN,\n  RAIN,\n  SNOW,\n  THUNDER,\n  DRIZZLE\n} from '../constants/states';\n\n/*\nhttps://openweathermap.org/weather-conditions\n\n*/\nconst getWeatherState = weather => {\n  const { id } = weather[0];\n  if (id < 300) {\n    return THUNDER;\n  } else if (id < 400) {\n    return DRIZZLE;\n  } else if (id < 600) {\n    return RAIN;\n  } else if (id < 700) {\n    return SNOW;\n  } else if (id === 800) {\n    return SUN\n  } else {\n    return CLOUDY;\n  }\n}\n\nconst transformWeather = (weatherData) => {\n  const { weather } = weatherData;\n  const { humidity, temp } = weatherData.main;\n  const { speed } = weatherData.wind;\n  const weatherState = getWeatherState(weather);\n  const data = {\n    humidity,\n    temperature: Math.floor(temp),\n    weatherState,\n    wind: `${speed} m/s`\n  }\n  return data;\n}\n\nexport default transformWeather;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport purple from '@material-ui/core/colors/purple';\nimport Location from '../Location/Location';\nimport WeatherData from './WeatherData/WeatherData';\nimport transformWeather from '../../services/transformWeather';\n\nconst API_KEY = '7a14a66681fcd335079601f52f72ac59';\n\nclass WeatherLocation extends Component {\n\n  constructor (props) {\n    super();\n    this.state = {\n      city: props.city,\n      data: null\n    }\n  }\n\n  componentWillMount() {\n    const { city } = this.state;\n    const urlWeather = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`;\n    fetch(urlWeather)\n      .then(data => data.json())\n      .then(weatherData => {\n        const data = transformWeather(weatherData);\n        this.setState( {data} )\n        //console.log(JSON.stringify(weatherData));\n      });\n  }\n\n  render() {\n    const { onWeatherLocationClick } = this.props;\n    const {city, data} = this.state;\n    return (\n      <div className='WeatherLocation' onClick={onWeatherLocationClick}>\n        <Location city={city} />\n        { data ? <WeatherData data={ data } /> :\n          <CircularProgress style={{ color: purple[300] }} thickness={4} />}\n      </div>\n    );\n  }\n}\n\nWeatherLocation.propTypes = {\n  city: PropTypes.string,\n  onWeatherLocationClick: PropTypes.func,\n}\nexport default WeatherLocation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherLocation from './WeatherLocation';\n\nconst LocationList = ({cities, onSelectedLocation}) => {\n  const handleWeatherLocationClick = city => {\n    onSelectedLocation(city);\n  }\n  return (\n    <div className='LocationList'>\n      {cities.map(city => (\n        <WeatherLocation\n          city={city}\n          key={city}\n          onWeatherLocationClick={() => handleWeatherLocationClick(city)}/>\n      ))};\n    </div>\n  );\n}\n\nLocationList.proptTypes = {\n  cities: PropTypes.array,\n  onSelectedLocation: PropTypes.func,\n}\n\nexport default LocationList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherData from '../WeatherData/WeatherData';\n\nconst data = {\n  temperature: 10,\n  humidity: 10,\n  weatherState: 'normal',\n  wind: 'normal',\n};\n\nconst ForecastItem = ({ weekDay, hour, data }) => {\n  return (\n    <div>\n      <div>{ weekDay } Hour: { hour } hs</div>\n      <WeatherData data={data}/>\n    </div>\n\n  );\n}\n\nForecastItem.propTypes = {\n  weekDay: PropTypes.string.isRequired,\n  hour: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n  })\n}\nexport default ForecastItem;","import moment from 'moment';\nimport transformWeather from './transformWeather';\n\n/** Filter data for hours 6:00am, 12pm and 18pm */\nconst transformForecast = data => (\n  data.list.filter(item => (\n    moment.unix(item.dt).utc().hour() === 6 ||\n    moment.unix(item.dt).utc().hour() === 12 ||\n    moment.unix(item.dt).utc().hour() === 18\n  )).map(item => (\n    {\n      weekDay: moment.unix(item.dt).format('dddd'),\n      hour: moment.unix(item.dt).utc().hour(),\n      data: transformWeather(item)\n    }\n  ))\n);\n\nexport default transformForecast;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport ForecastItem from './ForecastItem';\nimport transformForecast from './../../../services/transformForecast';\n\n/* const days = [\n  'Lunes',\n  'Martes',\n  'MiÃ©rcoles',\n  'Jueves',\n  'Viernes'\n];\n\nconst data = {\n  temperature: 10,\n  humidity: 10,\n  weatherState: 'normal',\n  wind: 'normal',\n}; */\n\nconst API_KEY = '7a14a66681fcd335079601f52f72ac59';\n\nclass ForecastExtended extends Component {\n  constructor() {\n    super();\n    this.state = {\n      forecastData: null\n    }\n  }\n  componentDidMount() {\n    this.updateCity(this.props.city);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.city !== this.props.city) {\n      this.setState({ forecastData: null});\n      this.updateCity(nextProps.city);\n    }\n  }\n\n  updateCity = city => {\n    const urlWeather = `http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${API_KEY}`;\n    fetch(urlWeather)\n      .then(data => data.json())\n      .then(weatherData => {\n        const forecastData = transformForecast(weatherData);\n        this.setState({ forecastData });\n      });\n  }\n\n\n  renderForecastItemDays(forecastData) {\n    return forecastData.map(forecast => (\n      <ForecastItem\n        weekDay={forecast.weekDay}\n        key={`${forecast.weekDay}${forecast.hour}`}\n        hour={forecast.hour}\n        data={forecast.data}\n      />\n    ));\n  }\n  renderProgress = () => {\n    return <h3>loading forecast extended...</h3>\n  }\n  render() {\n    const {city} = this.props;\n    const { forecastData } = this.state;\n    return (\n      <div className='ForecastExtended'>\n        <h2 className='ForecastExtended__title'>\n          Extended forecast for {city}\n        </h2>\n        { forecastData ?\n          this.renderForecastItemDays(forecastData):\n          this.renderProgress()}\n\n      </div>\n    );\n  }\n}\n\nForecastExtended.propTypes = {\n  city: PropTypes.string.isRequired,\n}\n\nexport default ForecastExtended;","import React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport LocationList from './Weather/LocationList';\nimport ForecastExtended from './Weather/ForecastExtended/ForecastExtended';\n\nconst cities = [\n  'Mexico,mx',\n  'Washington,us',\n  'Bogota,co',\n  'Madrid,es',\n  'Buenos Aires,ar',\n  'Chile'\n];\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      city: null\n    }\n  }\n\n  handleSelectionLocation = city => {\n    this.setState({\n      city\n    });\n  }\n\n  render() {\n    const { city } = this.state;\n    return (\n      <div className=\"App\">\n        <Grid>\n          <Row>\n            <Col xs={12}>\n              <AppBar>\n                <Toolbar >\n                  <IconButton color=\"inherit\" aria-label=\"Menu\">\n                    <MenuIcon/>\n                  </IconButton>\n                  <Typography variant=\"h5\" color=\"inherit\">\n                    Weather App\n                  </Typography>\n                </Toolbar>\n              </AppBar>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12} md={12} lg={6}>\n              <LocationList\n                cities={cities}\n                onSelectedLocation= { this.handleSelectionLocation } />\n            </Col>\n            <Col xs={12} md={12} lg={6}>\n              <Paper elevation={5}>\n                <div className='detail'>\n                  { city && <ForecastExtended city={city} /> }\n                </div>\n              </Paper>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/css/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}